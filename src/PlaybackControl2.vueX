<template>
  <div>
  <div id="playback-slider-container">
  <vue-slider
    v-model="value"
    :data="values"
    :data-value="'value'"
    :data-label="'label'"
    :marks="true"
    :process="false"
    :adsorb="false"
    :duration=".25"
  >
  <!-- eslint-disable-next-line vue/no-unused-vars -->
  <template v-slot:mark="{label,  pos, value, active}">
    <div v-if="marks.includes(valueToMark(value))">
    <div :class="['custom-mark',value === 0 ? 'big-mark' : '']" :style="{left: pos + '%'}">
    </div>
    <div class="custom-mark-text" :style="{left: pos + '%'}">
      {{ valueToMark(value) }}
    </div>
  </div>
  <div v-else>
    <span style="display: none"></span>
  </div>
  </template>
  </vue-slider>
</div>
<p>Value: {{value}}</p>
</div>

  
</template>


<script lang="ts">
import { defineComponent } from 'vue';
import VueSlider from 'vue-slider-component';

function symmetricSequence(max: number): number[] {
  const rightSide = (new Array(max + 1)).fill(0).map((_, i) => (i + 1));
  const leftSide = rightSide.map((value) => -value).reverse();
  const seq = leftSide.concat([0]).concat(rightSide);
  return seq;
}

console.log(symmetricSequence(3));
console.log();

export default defineComponent({
  name: 'PlaybackControl',
  
  components: {
    'vue-slider': VueSlider,
  },
  
  props: {
    // Define the props here
  },
  
  mounted() {
    console.log(this);
    // Do something when the component is mounted
  },
  
  data() {
    return {
      // Define the data here
      value: 0,
      data: ['a', 'b', 'c'],
      marks: [-1000,-100, -10, -1, 0, 1,10, 100,1000],
      playbackValues: symmetricSequence(3)
    };
  },
  
  methods: {
    // Define the methods here
    valueToMark(value: number, base: number = 10): number {
      return Math.sign(value) * Math.pow(base, Math.abs(value) - 1);
    },
  },
  
  computed: {
    // Define the computed properties here
    values(): {value: number, label: string}[] {
      return this.playbackValues.map((value: number) => {
        return {
          value: value,
          label: this.valueToMark(value).toString(),
        };
      });
    }
  },
  
  watch: {
    // Define the watch properties here
  },
});

</script>

<style lang="less">
// Define the styles here

// check for id app which has #playback-slider-container as direct child
#app:has(> div > #playback-slider-container) {
  padding: 2rem;
}

#playback-slider-container {
  padding: 2rem;
  outline: 1px solid white;
}

.custom-mark {
  position: absolute;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: red;
  outline: 1px solid white;
  transform: translateY(-50%) translateX(-50%);
  top: 50%;
  
}

.big-mark {
  width: 30px;
  height: 30px;
  background-color: blue;
}

.custom-mark-text {
  position: absolute;
  transform: translate(-50%, 50%);
  top: 100%;
  left: 50%;
  color: white;
  font-size: 0.8rem;
  font-weight: bold;
  text-align: center;
}
</style>